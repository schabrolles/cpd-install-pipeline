{{- if semverCompare ">=5.1.0" .Values.cpd_version }}
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  {{ if .Values.airgap.enabled }}
  name: cpd-ctrl-center-install-pipeline-airgap
  {{ else }}
  name: cpd-ctrl-center-install-pipeline
  {{ end }}
  namespace: {{ .Release.Namespace }}
spec:
  params:
    {{ if .Values.airgap.enabled }}
    - default: {{ .Values.airgap.private_registry_secret }}
      description: registry-secret containing your private registry credential
      name: PRIVATE_REGISTRY_SECRET
      type: string
    {{ end }}
    - default: {{ .Values.default_olm_utils_image }}
      description: olm-utils images
      name: OLM_UTILS_IMAGE
      type: string
    - default: {{ .Values.cpd_version }}
      description: cloud-pak for data version
      name: VERSION
      type: string
    - default: ibm-cc
      description: IBM Software Hub Control Center operand namspace
      name: CONTROL_PROJECT_OPERANDS
      type: string
    - default: ibm-cc-operators
      description: cloud-pak operators namspace
      name: CONTROL_PROJECT_OPERATORS
      type: string
    - default: ibm-licensing
      description: cloud-pak ibm-licensing namespace
      name: CONTROL_PROJECT_LICENSE_SERVICE
      type: string
    - default: ibm-cpd-scheduler
      description: cloud-pak scheduler namespace
      name: CONTROL_PROJECT_SCHEDULING_SERVICE
      type: string
    {{ if not .Values.airgap.enabled }}
    - name: IBM_ENTITLEMENT_KEY
      description: your ICR key to access cp.icr.io
      type: string
    {{ end }}
    - default: {{ .Values.storageClass.block }}
      description: StorageClass for Block
      name: STG_CLASS_BLOCK
      type: string
    - default: {{ .Values.storageClass.file }}
      description: StorageClass for Files
      name: STG_CLASS_FILE
      type: string
    - name: STORAGE_TESTS
      description: "run test performance validation against Provided StorageClass"
      type: string
      default: "false"
    - name: ACCEPT_LICENCE
      description: 'Please Accept LICENCE (set [true])'
      type: string
      {{ if .Values.tektonPatch.activateEnum }}
      enum: ["true", "false"]
      {{ end }} 
    - name: DB2_LIMITED_PRIV
      description: Run DB2 pod in Limited Privilege mode
      type: string
      default: "false"
      {{ if .Values.tektonPatch.activateEnum }}
      enum: ["true", "false"]
      {{ end }}
    - name: CASE_FROM_OCI
      description: Set [true] to download CASE as OCI, [false] to get CASE from Github.
      type: string
      {{ if .Values.proxy.enabled }}default: "false"{{ else }}default: "true"{{ end }}
      {{ if .Values.tektonPatch.activateEnum }}
      enum: ["true", "false"]
      {{ end }}
    - default: "cp.icr.io/cpopen"
      description: only if CASE_FROM_OCI=true, set the registry URL from which you want to download CASE packages 
      name: OCI_LOCATION
      type: "string"
    - default: "{{ .Release.Name }}-install-option"
      description: configMap which contains cloud pak install-options
      name: CP-INSTALL-OPTIONS
      type: string
  tasks:
  - name: update-pull-secret
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        {{ if not .Values.airgap.enabled }}
        add-icr-cred-to-global-pull-secret \
        --entitled_registry_key=$(params.IBM_ENTITLEMENT_KEY)
        {{ else }}
        mkdir -p pull-secret && \
        oc extract secret/pull-secret -n openshift-config --to=pull-secret && \
        mkdir -p {{ .Values.airgap.private_registry_secret }} && \
        oc extract secret/$(params.PRIVATE_REGISTRY_SECRET) -n {{ .Release.Namespace }} --to={{ .Values.airgap.private_registry_secret }} && \
        jq -s '.[0] * .[1]' pull-secret/.dockerconfigjson {{ .Values.airgap.private_registry_secret }}/.dockerconfigjson > .dockerconfigjson && \
        oc set data secret/pull-secret -n openshift-config --from-file=.dockerconfigjson
        {{ end }}

        if [[ $(oc get mcp -o name | wc -l) -eq 0 ]]; then
          platformSpec=$(oc get Infrastructure/cluster -o jsonpath='{.spec.platformSpec.type}')
          echo
          echo "non-MCP cluster detected, activating workaround"
          case $platformSpec in 
            KubeVirt )
              echo "KubeVirt detected, activating workaround"
              echo
              dockerconfigfile=/var/lib/kubelet/config.json
            ;;
            IBMCloud )
              echo "ROKS detected, activating workaround"
              echo
              dockerconfigfile=/.docker/config.json
            ;;
          esac
            oc debug $(oc get node -o name | head -n1) -- chroot /host cat $dockerconfigfile > /tmp/config.json

            {{ if not .Values.airgap.enabled }}
            cat /tmp/config.json | jq --arg auth cp:$(params.IBM_ENTITLEMENT_KEY) '.auths += {"cp.icr.io": {"auth": $auth|@base64}}' > /tmp/config.json.new
            {{ else }}
            oc extract secret/$(params.PRIVATE_REGISTRY_SECRET) -n {{ .Release.Namespace }} --to=/tmp
            jq -s '.[0] * .[1]' /tmp/config.json /tmp/.dockerconfigjson > /tmp/config.json.new
            {{ end }}

            sleep 1
            for n in `oc get node -o name`; do 
              oc adm copy-to-node --copy=/tmp/config.json.new=$dockerconfigfile $n
            done
        fi
    taskRef:
      kind: Task
      name: olm-utils
  - name: apply-cluster-components
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        apply-cluster-components \
        --release=$(params.VERSION) \
        --license_acceptance=$(params.ACCEPT_LICENCE) \
        --licensing_ns=$(params.CONTROL_PROJECT_LICENSE_SERVICE) \
        --case_download=true \
        --from_oci=$(params.CASE_FROM_OCI) \
        --oci_location=$(params.OCI_LOCATION)
    runAfter:
    - update-pull-secret
    taskRef:
      kind: Task
      name: olm-utils
    timeout: 1h0m0s
  - name: apply-scheduler
    params:
      - name: OLM_UTILS_IMAGE
        value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
      - name: CP-INSTALL-OPTIONS
        value: $(params.CP-INSTALL-OPTIONS)
      - name: OLM_CMD
        value: |-
          apply-scheduler \
          --release=$(params.VERSION) \
          --license_acceptance=$(params.ACCEPT_LICENCE) \
          --scheduler_ns=$(params.CONTROL_PROJECT_SCHEDULING_SERVICE) \
          --case_download=true \
          --from_oci=$(params.CASE_FROM_OCI) \
          --oci_location=$(params.OCI_LOCATION)
    runAfter:
    - apply-cluster-components
    taskRef:
      kind: Task
      name: olm-utils
  - name: authorize-inst-topology
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        authorize-instance-topology \
        --cpd_operator_ns=$(params.CONTROL_PROJECT_OPERATORS) \
        --cpd_instance_ns=$(params.CONTROL_PROJECT_OPERANDS)
    runAfter:
    - apply-scheduler
    taskRef:
      kind: Task
      name: olm-utils
  - name: setup-control-center
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        setup-control-center \
        --release=$(params.VERSION) \
        --operator_ns=$(params.CONTROL_PROJECT_OPERATORS) \
        --operand_ns=$(params.CONTROL_PROJECT_OPERANDS) \
        --license_acceptance=$(params.ACCEPT_LICENCE) \
        --block_storage_class=$(params.STG_CLASS_BLOCK) \
        --case_download=true \
        --run_storage_tests=$(params.STORAGE_TESTS) \
        --from_oci=$(params.CASE_FROM_OCI) \
        --oci_location=$(params.OCI_LOCATION)
    runAfter:
    - authorize-inst-topology
    taskRef:
      kind: Task
      name: olm-utils
  - name: set-db2-limited-privs
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        oc apply -f - <<EOF
        apiVersion: v1
        data:
          DB2U_RUN_WITH_LIMITED_PRIVS: "true"
        kind: ConfigMap
        metadata:
          name: db2u-product-cm
          namespace: $(params.CONTROL_PROJECT_OPERATORS)
        EOF
    runAfter:
    - setup-control-center
    taskRef:
      kind: Task
      name: olm-utils
    when:
      - input: $(params.DB2_LIMITED_PRIV)
        operator: in
        values:
        - "true"
        - "yes"
  - name: oauth-setup
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        export CONTROL_CENTER_ROUTE=$(oc get route cpd -n ${params.CONTROL_PROJECT_OPERANDS} -ojsonpath={.spec.host}"{'\n'}")
        export OAUTH_CLIENT_ID=ibm-software-hub-cc
        export OAUTH_SECRET=$(tr -dc 'A-Za-z0-9!@#$%^&*()_' < /dev/urandom | fold -w 32 | head -1)

        cat <<EOF |oc apply -f -
        kind: OAuthClient
        apiVersion: oauth.openshift.io/v1
        metadata:
          name: ${OAUTH_CLIENT_ID}
        secret: ${OAUTH_SECRET}
        redirectURIs:
          - 'https://${CONTROL_CENTER_ROUTE}/zen/oauth/redirect'
        grantMethod: prompt
        accessTokenMaxAgeSeconds: 120
        accessTokenInactivityTimeoutSeconds: 300
        scopeRestrictions:
          - clusterRole:
              allowEscalation: false
              namespaces:
                - '*' 
              roleNames: 
                - 'cluster-reader'
        EOF
    runAfter:
    - set-db2-limited-privs
    taskRef:
      kind: Task
      name: olm-utils
  - name: instance-details
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{ .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        get-cpd-instance-details \
        --cpd_instance_ns=$(params.CONTROL_PROJECT_OPERANDS) \
        --get_admin_initial_credentials=true
    runAfter:
    - oauth-setup
    taskRef:
      kind: Task
      name: olm-utils
  - name: get-cr-status
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{ .Values.arch }}{{- end }}
    - name: OLM_CMD
      value: |-
        get-cr-status \
        --cpd_instance_ns=$(params.CONTROL_PROJECT_OPERANDS)
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    runAfter:
    - oauth-setup 
    taskRef:
      kind: Task
      name: olm-utils
{{- end -}}