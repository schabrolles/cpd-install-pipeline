apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  params:
    - default: icr.io/cpopen/cpd/olm-utils-v2
      description: olm-utils images
      name: OLM_UTILS_IMAGE
      type: string
    - default: 4.8.5
      description: cloud-pak for data version
      name: VERSION
      type: string
    - default: wml,ws
      description: "cloud-pak components to install (wml,ws,watsonx_ai,watsonx_governance,watsonx_data ...)"
      name: COMPONENTS
      type: string
    - default: cpd
      description: cloud-pak operand namspace
      name: PROJECT_CPD_INST_OPERANDS
      type: string
    - default: cpd-operators
      description: cloud-pak operators namspace
      name: PROJECT_CPD_INST_OPERATORS
      type: string
    - default: ibm-cert-manager
      description: cloud-pak ibm-cert-manager namespace
      name: PROJECT_CERT_MANAGER
      type: string
    - default: ibm-licensing
      description: cloud-pak ibm-licensing namespace
      name: PROJECT_LICENSE_SERVICE
      type: string
    - default: ibm-scheduler
      description: cloud-pak scheduler namespace
      name: PROJECT_SCHEDULING_SERVICE
      type: string
    - name: IBM_ENTITLEMENT_KEY
      type: string
    - default: ocs-storagecluster-ceph-rbd
      description: StorageClass for Block
      name: STG_CLASS_BLOCK
      type: string
    - default: ocs-storagecluster-cephfs
      description: StorageClass for Files
      name: STG_CLASS_FILE
      type: string
    - default: cpd-enterprise
      description: "Entitlement, choose between: cpd-enterprise, cpd-standard, watsonx-ai, watsonx-data, watsonx-gov-model-management, watsonx-gov-risk-compliance"
      name: ENTITLEMENT
      type: string
      {{ if .Values.tektonPatch.activateEnum }}
      enum: ["cpd-enterprise", "cpd-standard", "watsonx-ai", "watsonx-data", "watsonx-gov-model-management", "watsonx-gov-risk-compliance"]
      {{ end }}
    - default: "false"
      description: Set true if you want to enable ibm-scheduler
      name: SCHEDULER
      type: "boolean"
      {{ if .Values.tektonPatch.activateEnum }}
      enum: ["true", "false"]
      {{ end }}
    - name: ACCEPT_LICENCE
      description: 'Please Accept LICENCE (set true)'
      type: "boolean"
      {{ if .Values.tektonPatch.activateEnum }}
      enum: ["true", "false"]
      {{ end }} 
    - default: "true"
      description: 'Set false for non-prod environment '
      name: PRODUCTION
      type: "boolean"
      {{ if .Values.tektonPatch.activateEnum }}
      enum: ["true", "false"]
      {{ end }} 
    - name: APPLY_MACHINECONFIG
      description: Apply KubeletConfig for cloud-pak-for-data (PidsLimit)
      type: "boolean"
      default: "true"
      {{ if .Values.tektonPatch.activateEnum }}
      enum: ["true", "false"]
      {{ end }} 
    - name: DB2_LIMITED_PRIV
      description: Run DB2 pod in Limited Privilege mode
      type: "boolean"
      default: "false"
      {{ if .Values.tektonPatch.activateEnum }}
      enum: ["true", "false"]
      {{ end }}
    - default: "true"
      description: Set true to download CASE as OCI, false to get CASE from Github.
      name: CASE_FROM_OCI
      type: "boolean"
      {{ if .Values.tektonPatch.activateEnum }}
      enum: ["true", "false"]
      {{ end }}
    - default: "icr.io/cpopen"
      description: if CASE_FROM_OCI=true, set the registry URL from which you want to download CASE packages 
      name: OCI_LOCATION
      type: "string"
    - default: "false"
      description: (for watsonx.ai) Set true to preform the installation without GPU.
      name: NO_GPU
      type: string
      {{ if .Values.tektonPatch.activateEnum }}
      enum: ["true", "false"]
      {{ end }} 
    - default: "{{ .Release.Name }}-install-option"
      description: configMap which contains cloud pak install-options
      name: CP-INSTALL-OPTIONS
      type: string
  tasks:
  - name: kubelet-pod-pids-limit
    retries: 10
    params:
      - name: OLM_UTILS_IMAGE
        value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
      - name: CP-INSTALL-OPTIONS
        value: $(params.CP-INSTALL-OPTIONS)
      - name: OLM_CMD
        value: |-
          if [[ $(oc get mcp -o name | wc -l) -gt 0 ]]; then
            apply-pid-limit
          else
            echo "No MachineConfig Found"
          fi
    taskRef:
      kind: Task
      name: olm-utils
    when:
      - input: $(params.APPLY_MACHINECONFIG)
        operator: in
        values:
        - "true"
        - "yes"
  - name: kubelet-db2-limited-priv
    retries: 10
    params:
      - name: OLM_UTILS_IMAGE
        value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
      - name: CP-INSTALL-OPTIONS
        value: $(params.CP-INSTALL-OPTIONS)
      - name: OLM_CMD
        value: |-
          if [[ $(oc get mcp -o name | wc -l) -gt 0 ]]; then
            apply-db2-kubelet
          else
            echo "No MachineConfig Found"
          fi
    taskRef:
      kind: Task
      name: olm-utils
    when:
      - input: $(params.DB2_LIMITED_PRIV)
        operator: in
        values:
        - "true"
        - "yes"
  - name: update-pull-secret
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        add-icr-cred-to-global-pull-secret \
        --entitled_registry_key=$(params.IBM_ENTITLEMENT_KEY)

        if [[ $(oc get mcp -o name | wc -l) -eq 0 ]]; then
          echo
          echo "non-MCP cluster detected, activating workaround"
          oc debug $(oc get node -o name | head -n1) -- chroot /host cat /.docker/config.json > /tmp/config.json

          cat /tmp/config.json | jq --arg auth cp:$(params.IBM_ENTITLEMENT_KEY) '.auths += {"cp.icr.io": {"auth": $auth|@base64}}' > /tmp/config.json.new
          sleep 1

          for n in `oc get node -o name`; do 
            oc adm copy-to-node --copy=/tmp/config.json.new=/.docker/config.json $n
          done
        fi
    taskRef:
      kind: Task
      name: olm-utils
  - name: apply-cluster-components
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        apply-cluster-components \
        --release=$(params.VERSION) \
        --license_acceptance=$(params.ACCEPT_LICENCE) \
        --cert_manager_ns=$(params.PROJECT_CERT_MANAGER) \
        --licensing_ns=$(params.PROJECT_LICENSE_SERVICE) \
        --case_download=true \
        --from_oci=$(params.CASE_FROM_OCI) \
        --oci_location=$(params.OCI_LOCATION)
    runAfter:
    - update-pull-secret
    - kubelet-pod-pids-limit
    - kubelet-db2-limited-priv
    taskRef:
      kind: Task
      name: olm-utils
    timeout: 1h0m0s
  - name: apply-scheduler
    params:
      - name: OLM_UTILS_IMAGE
        value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
      - name: CP-INSTALL-OPTIONS
        value: $(params.CP-INSTALL-OPTIONS)
      - name: OLM_CMD
        value: |-
          apply-scheduler \
          --release=$(params.VERSION) \
          --license_acceptance=$(params.ACCEPT_LICENCE) \
          --scheduler_ns=$(params.PROJECT_SCHEDULING_SERVICE) \
          --case_download=true \
          --from_oci=$(params.CASE_FROM_OCI) \
          --oci_location=$(params.OCI_LOCATION)
    runAfter:
    - apply-cluster-components
    taskRef:
      kind: Task
      name: olm-utils
    when:
    - input: $(params.SCHEDULER)
      operator: in
      values:
      - "true"
      - "yes"
  - name: authorize-inst-topology
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        authorize-instance-topology \
        --cpd_operator_ns=$(params.PROJECT_CPD_INST_OPERATORS) \
        --cpd_instance_ns=$(params.PROJECT_CPD_INST_OPERANDS)
    runAfter:
    - apply-scheduler
    taskRef:
      kind: Task
      name: olm-utils
  - name: setup-inst-topology
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        setup-instance-topology \
        --release=$(params.VERSION) \
        --cpd_operator_ns=$(params.PROJECT_CPD_INST_OPERATORS) \
        --cpd_instance_ns=$(params.PROJECT_CPD_INST_OPERANDS) \
        --license_acceptance=$(params.ACCEPT_LICENCE) \
        --block_storage_class=$(params.STG_CLASS_BLOCK) \
        --case_download=true \
        --from_oci=$(params.CASE_FROM_OCI) \
        --oci_location=$(params.OCI_LOCATION)
    runAfter:
    - authorize-inst-topology
    taskRef:
      kind: Task
      name: olm-utils
  - name: cpd-platform-apply-olm
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        apply-olm \
        --release=$(params.VERSION) \
        --cpd_operator_ns=$(params.PROJECT_CPD_INST_OPERATORS) \
        --components=cpd_platform \
        --case_download=true \
        --from_oci=$(params.CASE_FROM_OCI) \
        --oci_location=$(params.OCI_LOCATION)
    runAfter:
    - setup-inst-topology
    taskRef:
      kind: Task
      name: olm-utils
  - name: set-db2-limited-privs
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        oc apply -f - <<EOF
        apiVersion: v1
        data:
          DB2U_RUN_WITH_LIMITED_PRIVS: "true"
        kind: ConfigMap
        metadata:
          name: db2u-product-cm
          namespace: $(params.PROJECT_CPD_INST_OPERATORS)
        EOF
    runAfter:
    - setup-inst-topology
    taskRef:
      kind: Task
      name: olm-utils
    when:
      - input: $(params.DB2_LIMITED_PRIV)
        operator: in
        values:
        - "true"
        - "yes"
  - name: cpd-platform-apply-cr
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        apply-cr \
        --release=$(params.VERSION) \
        --cpd_instance_ns=$(params.PROJECT_CPD_INST_OPERANDS) \
        --components=cpd_platform \
        --block_storage_class=$(params.STG_CLASS_BLOCK) \
        --file_storage_class=$(params.STG_CLASS_FILE) \
        --license_acceptance=$(params.ACCEPT_LICENCE) \
        --param-file=/tmp/install-options/install-options.yml
    runAfter:
    - cpd-platform-apply-olm
    - set-db2-limited-privs
    taskRef:
      kind: Task
      name: olm-utils
    timeout: 1h30m0s
  - name: component-apply-olm
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        apply-olm \
        --release=$(params.VERSION) \
        --cpd_operator_ns=$(params.PROJECT_CPD_INST_OPERATORS) \
        --components=$(params.COMPONENTS) \
        --case_download=true \
        --from_oci=$(params.CASE_FROM_OCI) \
        --oci_location=$(params.OCI_LOCATION)
    runAfter:
    - cpd-platform-apply-olm
    - set-db2-limited-privs
    taskRef:
      kind: Task
      name: olm-utils
  - name: get-license
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        get-license \
        --release=$(params.VERSION) \
        --license-type=EE
    runAfter:
    - apply-entitlement
    taskRef:
      kind: Task
      name: olm-utils
  - name: components-apply-cr
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        apply-cr \
        --release=$(params.VERSION) \
        --cpd_instance_ns=$(params.PROJECT_CPD_INST_OPERANDS) \
        --components=$(params.COMPONENTS) \
        --block_storage_class=$(params.STG_CLASS_BLOCK) \
        --file_storage_class=$(params.STG_CLASS_FILE) \
        --license_acceptance=$(params.ACCEPT_LICENCE) \
        --param-file=/tmp/install-options/install-options.yml
    runAfter:
    - cpd-platform-apply-cr
    - component-apply-olm
    taskRef:
      kind: Task
      name: olm-utils
    timeout: 3h0m0s
  - name: no-gpu-patch
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |+
        TIME=90
        while ! oc get -n $(params.PROJECT_CPD_INST_OPERANDS) watsonxai/watsonxai-cr > /dev/null 2>&1; do
          [ $TIME -eq 0 ] && exit 2
          echo "Wait from watsonxai-cr to be created. ($TIME)"
          sleep 60
          TIME=$((TIME - 1))
        done

        echo
        echo "Patch watsonxai-cr to disable tunning-studio (bamdev)"
        oc patch watsonxai watsonxai-cr \
        --namespace=$(params.PROJECT_CPD_INST_OPERANDS) \
        --type='json' \
        -p='[{"op": "add", "path": "/spec/tuning_disabled", "value": true}]'

        echo
        echo "restart watsonx-ai operator"
        sleep 2
        oc delete pod -n $(params.PROJECT_CPD_INST_OPERATORS) -l app.kubernetes.io/name=ibm-cpd-watsonx-ai-operator --ignore-not-found

    runAfter:
    - cpd-platform-apply-cr
    - component-apply-olm
    taskRef:
      kind: Task
      name: olm-utils
    when:
    - input: $(params.NO_GPU)
      operator: in
      values:
      - "true"
      - "yes"
  - name: apply-entitlement
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        apply-entitlement \
        --cpd_instance_ns=$(params.PROJECT_CPD_INST_OPERANDS) \
        --entitlement=$(params.ENTITLEMENT) --production=$(params.PRODUCTION) --apply_branding=true
    runAfter:
    - no-gpu-patch
    - components-apply-cr
    taskRef:
      kind: Task
      name: olm-utils
  - name: instance-details
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    - name: OLM_CMD
      value: |-
        get-cpd-instance-details \
        --cpd_instance_ns=$(params.PROJECT_CPD_INST_OPERANDS) \
        --get_admin_initial_credentials=true
    runAfter:
    - apply-entitlement
    taskRef:
      kind: Task
      name: olm-utils
  - name: get-cr-status
    params:
    - name: OLM_UTILS_IMAGE
      value: $(params.OLM_UTILS_IMAGE):$(params.VERSION){{- if ne .Values.arch "x86" -}} .{{  .Values.arch }}{{- end }}
    - name: OLM_CMD
      value: |-
        get-cr-status \
        --cpd_instance_ns=$(params.PROJECT_CPD_INST_OPERANDS)
    - name: CP-INSTALL-OPTIONS
      value: $(params.CP-INSTALL-OPTIONS)
    runAfter:
    - apply-entitlement
    taskRef:
      kind: Task
      name: olm-utils